---
# Check if a local keyring file is present
- name: cluster | Check if node has already been bootstrapped
  ansible.builtin.stat:
    path: "{{ consul_configuration.data_dir + '/serf/local.keyring' }}"
  register: keyring_exists
  ignore_errors: true
  become: true

- name: cluster | Manage cluster encryption keys
  when: keyring_exists.stat.exists
  block:
    # Gather the currently used encryption key of the cluster
    - name: cluster | Fetch active encryption key
      ansible.builtin.slurp:
        src: "{{ consul_configuration.data_dir + '/serf/local.keyring' }}"
      register: keyring_value
      become: true

    # Set consul_encryption_key_active to allow comparison in next step
    - name: cluster | Set fact consul_encryption_key_active
      ansible.builtin.set_fact:
        consul_encryption_key_active: "{{ keyring_value['content'] | b64decode | from_json | first }}"
      no_log: true
      become: true

    # Inform the user the the node's key does not match his given key in consul_encryption_key and remove the host from play
    - name: cluster | Compare active key with consul_encryption_key
      ansible.builtin.fail:
        msg: >
          "ATTENTION: This node uses another encryption key then defined in consul_encryption_key!
          The active key can be found locally in {{ consul_configuration.data_dir }}/serf/local.keyring"
          Update the variable consul_encryption_key!
          Removing node from play.
      become: true
      when: consul_encryption_key_active != consul_configuration.encrypt

- name: cluster | Manage Cluster peers
  when:
    - consul_peers_json_prepared|bool
    - inventory_hostname in groups[consul_servers_group]
  block:
    - name: cluster | retrieve node ID
      ansible.builtin.slurp:
        src: "{{ consul_configuration.data_dir + '/node-id' }}"
      register: consul_node_id_b64
      become: true

    - name: cluster | Set consul_node_id fact
      ansible.builtin.set_fact:
        consul_node_id: "{{ consul_node_id_b64['content'] | b64decode }}"

    - name: cluster | deploy peers.json_prepared
      ansible.builtin.template:
        src: templates/var/consul/peers.json_prepared.j2
        dest: "{{ consul_peers_json_prepared_path + '/peers.json_prepared' }}"
        owner: "{{ consul_user_info.user }}"
        group: "{{ consul_user_info.group }}"
        mode: "0640"
      become: true

- name: cluster | ensure absence of peers.json_prepared if desired
  ansible.builtin.file:
    path: "{{ consul_peers_json_prepared_path + '/peers.json_prepared' }}"
    state: absent
  become: true
  when: not consul_peers_json_prepared|bool
