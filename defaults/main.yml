---
# defaults file for ansible-consul

consul_architecture_map:
  amd64: amd64
  x86_64: amd64
  aarch64: arm64
  arm64: arm64
  32-bit: "386"
  64-bit: amd64
consul_architecture: "{{ consul_architecture_map[ansible_architecture] }}"

# https://www.consul.io/docs/agent/options.html
# The following are defined in config.json.j2 to ensure integer
# bootstrap_expect:
consul_configuration:
  acl:
    default_policy: allow
    down_policy: extend-cache
    tokens:
      agent: ""
      agent_master: ""
      default: ""
      master: a5ac5cb6-c0d1-4aa3-bf9a-ca3507adc7ed # Generated using 'uuidgen'
      replication: ""
  bind_addr: "{{ hostvars[inventory_hostname]['ansible_' + consul_bind_interface]['ipv4']['address'] }}"
  client_addr: 127.0.0.1
  data_dir: /var/consul
  datacenter: dc1
  dns_config: {}
  enable_acl_replication: false
  enable_syslog: true
  encrypt: qLLp1YCJzp9E/xhg11qkdQ== # Generate using 'consul keygen'
  log_level: INFO
  node_name: "{{ ansible_hostname }}"
  performance: {}
  primary_datacenter: dc1
  retry_join: |
    {% set servers = [] %}
    {% for server in groups[consul_servers_group] %}
    {%   set _ = servers.append(hostvars[server]['ansible_' + consul_bind_interface]['ipv4']['address']) %}
    {% endfor %}
    {{ servers }}
  retry_join_wan: []
  server: true
  telemetry: {}
  ui: false

# Enables Consul backup/snapshots
consul_backups:
  backup_dir: /var/backups
  schedule:
    hour: "*"
    minute: 0
    weekday: "*"
  enabled: true

consul_bin_path: /usr/local/bin

# Define interface to bind to...(eth0|eth1|enp0s8)
consul_bind_interface: "{{ ansible_default_ipv4['interface'] | replace('-', '_') }}"

consul_config_dir: /etc/consul.d

# Define Consul ACLs within YAML
# To apply ACLs, consul_enable_acls needs to be true and consul_acl_datacenter needs to be set.
# The role will apply the ACLs only in consul_acl_datacenter as they are available in the whole WAN pool.
# The role will also apply the ACLs only against one server as this is sufficient to set ACLs globally.
# The double dash in rules in required as the Ansible module consul_acl expects one list with additional lists in it.
consul_acl:
  []
  # - mgmt_token: 3d3ae8b5-675e-467f-9616-2f0a82552742
  #   name: Foo access
  #   token: 3cfc812f-6dc2-43f1-bceb-f10e8678f35d
  #   rules:
  #     - - key: foo
  #         policy: read
  #       - key: private/foo
  #         policy: write
  # - mgmt_token: "{{ variable_somewhere_else }}"
  #   name: Foo access 2
  #   token: "{{ may_come_from_elsewhere_too }}"
  #   rules:
  #     - - node: my-node
  #         policy: read
  #       - service: ""
  #         policy: write

# Control if role will deploy a pre-populated peers.json for outage recovery purposes.
# Checkout the official Consul documentation on "Outage Recovery" for details.
consul_peers_json_prepared: false
# Path where prepared json file should get placed at
consul_peers_json_prepared_path: "{{ consul_configuration.data_dir + '/raft' }}"

# Defines if dnsmasq should be installed and configured to resolv
# consul dns queries to port 8600
consul_enable_dnsmasq: false

# Defines the Ansible group which contains the consul server(s)
consul_servers_group: consul_servers

# Defines if role upgrades consul binary on servers to consul_version
# Downgrades are not considered
# Recommendation: When set to true and after raising `consul_version, consider using `--forks=1` on next Ansible run to keep Consul cluster impact low on Upgrade.
consul_upgrade: false

# Define Consul user info to use for service
consul_user_info:
  user: consul
  group: consul

consul_version: 1.7.2
